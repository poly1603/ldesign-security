import { describe, it, expect, beforeEach } from 'vitest'
import { VulnerabilityChecker } from '../../src/core/vulnerability-checker'
import path from 'path'

describe('VulnerabilityChecker', () => {
  let checker: VulnerabilityChecker
  const fixturesPath = path.join(__dirname, '../fixtures')

  beforeEach(() => {
    checker = new VulnerabilityChecker(fixturesPath)
  })

  describe('check()', () => {
    it('should return an array of vulnerabilities', async () => {
      const vulnerabilities = await checker.check()
      expect(Array.isArray(vulnerabilities)).toBe(true)
    })

    it('should include vulnerability details', async () => {
      const vulnerabilities = await checker.check()
      if (vulnerabilities.length > 0) {
        const vuln = vulnerabilities[0]
        expect(vuln).toHaveProperty('package')
        expect(vuln).toHaveProperty('severity')
        expect(vuln).toHaveProperty('title')
        expect(vuln).toHaveProperty('description')
        expect(vuln).toHaveProperty('recommendation')
      }
    })

    it('should normalize severity levels', async () => {
      const vulnerabilities = await checker.check()
      vulnerabilities.forEach(vuln => {
        expect(['critical', 'high', 'medium', 'low']).toContain(vuln.severity)
      })
    })
  })

  describe('getSummary()', () => {
    it('should return vulnerability summary', async () => {
      const vulnerabilities = await checker.check()
      const summary = checker.getSummary(vulnerabilities)

      expect(summary).toHaveProperty('total')
      expect(summary).toHaveProperty('bySeverity')
      expect(summary).toHaveProperty('bySource')
      expect(summary).toHaveProperty('fixable')
      expect(typeof summary.total).toBe('number')
    })
  })

  describe('fix()', () => {
    it('should return fix result', async () => {
      const result = await checker.fix()

      expect(result).toHaveProperty('success')
      expect(result).toHaveProperty('message')
      expect(result).toHaveProperty('fixed')
      expect(typeof result.success).toBe('boolean')
      expect(typeof result.fixed).toBe('number')
    })
  })
})


